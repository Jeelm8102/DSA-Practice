Consider the following code segment. Let T(n) denote the number of times the for loop is executed by the program on input n. Which of the following is true?
void fun(int n){
    for(int i=n/2 to n){
        for(int j=1 to j<n/2){
            for(int k=1 to k< n){
                print(“I love coding”);
                k=k*2;
            }
            j++;
        }
        i++;
    }  
}
Ans: T(n) = O(n*n*logn)

Outermost loop runs for n/2 times, intermediate loop runs for n/2 times and innermost loop runs 
for logn time(k is incremented by multiplying by 2). Overall complexity is (n/2)*(n/2)*logn ~ O(n*n*logn)

2.
Consider the following code segment. Let T(n) denote the number of times the for loop is executed by the program on input n. Which of the following is true?
void fun(int n){
    for(i=1 to i^2 <= n){
        i++;
        print(“coding ninjas”);
    }  
}

Ans: T(n) = O(sqrt(n))

Consider the following C code segment. Let T(n) denote the number of times the for loop is executed by the program on input n. Which of the following is true?
public int IsPrime(int n){
    for(int i = 2 ; i <= sqrt(n);i++){
        if(n % i == 0){
            printf(“Not Prime”);
            return 0;
        }
        return 1;       
    }
}

Ans: T(n) = O(sqrt(n)) and T(n) = Ω(1)
solution:
We can define the terms ‘s’ according to relation si = si-1 + i.
 The value contained in ‘s’ at the ith iteration is the sum of the first ‘i’ positive integers.
  If k is the total number of iterations taken by the program, then the while loop terminates if: 1 + 2 + 3 ….+ k = [k(k+1)/2] > n 
  So k = O(sqrt(n)). #### Time Complexity of the above function O(sqrt(n)).

Consider the following code segment. Let T(n) denote the number of times the for loop is executed by the program on input n. Which of the following is true?
void fun(int n){
    i=1, s=1;
    while(s <= n){
        i++;
        s=s+i;
        print(“coding ninjas”);
    }
}

Ans: T(n) = O(sqrt(n))

Consider the following functions:
f(n) = 2^N
g(n) = n!
h(n) = n^(logn)
Which of the following statements about the asymptotic behaviour of f(n), g(n) and h(n) are true?

Ans: h(n) = O(f(n)); g(n) = Ω(f(n))
solution:According to the rate of growth: h(n) < f(n) < g(n) (g(n) is asymptotically greater than f(n), 
and f(n) is asymptotically greater than h(n)).
 We can easily see the above order by taking logarithms of the given three conditions. #### logn*logn < n < log(n!). Note that log(n!) = O(nlogn).